// <auto-generated />
using System;
using FPTPlaygroundServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FPTPlaygroundServer.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250309105650_UpdateEntitiesV5")]
    partial class UpdateEntitiesV5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoginMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.AccountVerify", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerifyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VerifyStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountVerifies");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CoinValue")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DiamondValue")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Require")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.CoinWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CoinWallets");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ConversationIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GroupImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.ConversationMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserMaskedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserMaskedId");

                    b.ToTable("ConversationMembers");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.DailyCheckpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CoinValue")
                        .HasColumnType("integer");

                    b.Property<int?>("DiamondValue")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DailyCheckpoints");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.DiamondWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DiamondWallets");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.FaceValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CoinValue")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiamondValue")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VNDValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FaceValues");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.LeaderBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LeaderBoards");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.LevelPass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CoinValue")
                        .HasColumnType("integer");

                    b.Property<int?>("DiamondValue")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Require")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LevelPasses");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.MaskedAvatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MaskedDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaskedDescriptionEN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaskedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaskedTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MaskedAvatars");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Mate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MateId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Mates");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserMaskedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserMaskedId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.MessageStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserMaskedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("UserMaskedId");

                    b.ToTable("MessageStatuses");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SuspectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("SuspectId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Specialize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecializeEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpecializeEntityId");

                    b.ToTable("Specializes");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthenticatorSecretKey")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("BiometricPublicKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Grade")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecializeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ServerId");

                    b.HasIndex("SpecializeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.UserAchievement", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uuid");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.UserIncome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserIncomes");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.UserLevelPass", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelPassId")
                        .HasColumnType("uuid");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClaim")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "LevelPassId");

                    b.HasIndex("LevelPassId");

                    b.ToTable("UserLevelPasses");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.UserMasked", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MaskedAvatarId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MaskedAvatarId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMaskeds");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.WalletTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CoinWalletId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DepositedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DiamondWalletId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FaceValueId")
                        .HasColumnType("uuid");

                    b.Property<long>("PaymentCode")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoinWalletId");

                    b.HasIndex("DiamondWalletId");

                    b.HasIndex("FaceValueId");

                    b.ToTable("WalletTrackings");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.AccountVerify", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.Account", "Account")
                        .WithMany("AccountVerifies")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Achievement", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.Achievement", "AchievementEntity")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("AchievementEntity");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.CoinWallet", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithOne("CoinWallet")
                        .HasForeignKey("FPTPlaygroundServer.Data.Entities.CoinWallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.ConversationMember", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.Conversation", "Conversation")
                        .WithMany("ConversationMembers")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithMany("ConversationMembers")
                        .HasForeignKey("UserId");

                    b.HasOne("FPTPlaygroundServer.Data.Entities.UserMasked", "UserMasked")
                        .WithMany()
                        .HasForeignKey("UserMaskedId");

                    b.Navigation("Conversation");

                    b.Navigation("User");

                    b.Navigation("UserMasked");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.DailyCheckpoint", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithMany("DailyCheckpoints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Device", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.Account", "Account")
                        .WithMany("Devices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.DiamondWallet", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithOne("DiamondWallet")
                        .HasForeignKey("FPTPlaygroundServer.Data.Entities.DiamondWallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Friendship", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("UpdatedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.LeaderBoard", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Mate", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "YourMate")
                        .WithMany()
                        .HasForeignKey("MateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UpdatedUser");

                    b.Navigation("User");

                    b.Navigation("YourMate");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Message", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId");

                    b.HasOne("FPTPlaygroundServer.Data.Entities.UserMasked", "UserMasked")
                        .WithMany("Messages")
                        .HasForeignKey("UserMaskedId");

                    b.Navigation("Conversation");

                    b.Navigation("Sender");

                    b.Navigation("UserMasked");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.MessageStatus", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.Message", "Message")
                        .WithMany("MessageStatuses")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "Receiver")
                        .WithMany("MessageStatuses")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("FPTPlaygroundServer.Data.Entities.UserMasked", "UserMasked")
                        .WithMany("MessageStatuses")
                        .HasForeignKey("UserMaskedId");

                    b.Navigation("Message");

                    b.Navigation("Receiver");

                    b.Navigation("UserMasked");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Notification", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Report", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "Suspect")
                        .WithMany()
                        .HasForeignKey("SuspectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Suspect");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Specialize", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.Specialize", "SpecializeEntity")
                        .WithMany()
                        .HasForeignKey("SpecializeEntityId");

                    b.Navigation("SpecializeEntity");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.User", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.Server", "Server")
                        .WithMany("Users")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.Specialize", "Specialize")
                        .WithMany()
                        .HasForeignKey("SpecializeId");

                    b.Navigation("Account");

                    b.Navigation("Server");

                    b.Navigation("Specialize");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.UserAchievement", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.UserIncome", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithMany("UserIncomes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.UserLevelPass", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.LevelPass", "LevelPass")
                        .WithMany("UserLevelPasses")
                        .HasForeignKey("LevelPassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithMany("UserLevelPasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelPass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.UserMasked", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.MaskedAvatar", "MaskedAvatar")
                        .WithMany("UserMaskeds")
                        .HasForeignKey("MaskedAvatarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTPlaygroundServer.Data.Entities.User", "User")
                        .WithMany("UserMaskeds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaskedAvatar");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.WalletTracking", b =>
                {
                    b.HasOne("FPTPlaygroundServer.Data.Entities.CoinWallet", "CoinWallet")
                        .WithMany("WalletTrackings")
                        .HasForeignKey("CoinWalletId");

                    b.HasOne("FPTPlaygroundServer.Data.Entities.DiamondWallet", "DiamondWallet")
                        .WithMany("WalletTrackings")
                        .HasForeignKey("DiamondWalletId");

                    b.HasOne("FPTPlaygroundServer.Data.Entities.FaceValue", "FaceValue")
                        .WithMany("WalletTrackings")
                        .HasForeignKey("FaceValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinWallet");

                    b.Navigation("DiamondWallet");

                    b.Navigation("FaceValue");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Account", b =>
                {
                    b.Navigation("AccountVerifies");

                    b.Navigation("Devices");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.CoinWallet", b =>
                {
                    b.Navigation("WalletTrackings");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.DiamondWallet", b =>
                {
                    b.Navigation("WalletTrackings");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.FaceValue", b =>
                {
                    b.Navigation("WalletTrackings");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.LevelPass", b =>
                {
                    b.Navigation("UserLevelPasses");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.MaskedAvatar", b =>
                {
                    b.Navigation("UserMaskeds");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Message", b =>
                {
                    b.Navigation("MessageStatuses");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.Server", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.User", b =>
                {
                    b.Navigation("CoinWallet")
                        .IsRequired();

                    b.Navigation("ConversationMembers");

                    b.Navigation("DailyCheckpoints");

                    b.Navigation("DiamondWallet")
                        .IsRequired();

                    b.Navigation("MessageStatuses");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserIncomes");

                    b.Navigation("UserLevelPasses");

                    b.Navigation("UserMaskeds");
                });

            modelBuilder.Entity("FPTPlaygroundServer.Data.Entities.UserMasked", b =>
                {
                    b.Navigation("MessageStatuses");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
